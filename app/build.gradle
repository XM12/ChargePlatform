plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply from: rootProject.file("android.gradle")

android {
    namespace rootProject.ext.android['applicationId']
    def code = getVersionCode()
    def name = getVersionName()

    defaultConfig {
        applicationId rootProject.ext.android['applicationId']
        versionCode code
        versionName name
    }

    buildTypes {
        local {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", rootProject.ext.api['local_url']
            buildConfigField "String", "BASE_PERSONAL_URL", rootProject.ext.api['local_personal_url']
            manifestPlaceholders = [CHANNEL_VALUE: "none"]
        }

        debug {
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", rootProject.ext.api['debug_url']
            buildConfigField "String", "BASE_PERSONAL_URL", rootProject.ext.api['debug_personal_url']
            manifestPlaceholders = [CHANNEL_VALUE: "none"]
        }

        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            zipAlignEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", rootProject.ext.api['release_url']
            buildConfigField "String", "BASE_PERSONAL_URL", rootProject.ext.api['release_personal_url']
            manifestPlaceholders = [CHANNEL_VALUE: "none"]
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = "charge_v${variant.mergedFlavor.versionName}_${new Date().format('MMdd')}_${variant.productFlavors[0].name}_${variant.buildType.name}"
            outputFileName += ".apk"
        }
    }
}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(versionFile))
        def versionCode = properties['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames
        if (':app:assembleRelease' in runTasks || ':app:assembleDebug' in runTasks) {
            properties['VERSION_CODE'] = (++versionCode).toString()
            properties.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getVersionName() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(versionFile))
        def versionName = properties['VERSION_NAME'].toString()
        return versionName
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    api project(':user')
    api project(':forum')
    api project(':public_pile')
    api project(':personal_pile')
}